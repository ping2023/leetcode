//two pointer soltion O(n)

public class Test {

	String isPalindromePossible(String input) {
		final String IMPOSSIBLE = "-1";
		int left = 0, right = input.length() - 1;
		String palindrome = "";

		while (left < right) {
			if (input.charAt(left) != input.charAt(right)) {
				if (!palindrome.isEmpty()) {
					return IMPOSSIBLE;
				}
				if (right - left == 1) {
					return IMPOSSIBLE;
				}
				if (right - left == 2) {
					char middle = input.charAt(left + 1);
					if (input.charAt(left) == middle) {
						palindrome = swap(right, right - 1, input);
					} else if (input.charAt(right) == middle) {
						palindrome = swap(left, left + 1, input);
					} else {
						return IMPOSSIBLE;
					}
				} else if (input.charAt(left + 1) != input.charAt(right)
						&& input.charAt(left) != input.charAt(right - 1)) {
					return IMPOSSIBLE;
				} else {
					palindrome = swap(right, right - 1, input);
				}
				left++;
				right--;
			}

			left++;
			right--;
		}
		if (palindrome.isEmpty())
			return IMPOSSIBLE;
		return palindrome;

	}

	String swap(int i, int j, String s) {
		StringBuffer sb = new StringBuffer(s);
		Character c = sb.charAt(i);
		sb.setCharAt(i, sb.charAt(j));
		sb.setCharAt(j, c);
		return sb.toString();
	}

	public static void main(String[] args) {
		Test o = new Test();

		System.out.println(o.isPalindromePossible("bbg")); // true
		System.out.println(o.isPalindromePossible("bdababd")); // true
		System.out.println(o.isPalindromePossible("gcagac")); // false
	}

}
